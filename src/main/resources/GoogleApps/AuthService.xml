<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>GoogleApps</web>
  <name>AuthService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>GoogleApps.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1420066800000</creationDate>
  <date>1420066800000</date>
  <contentUpdateDate>1420066800000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.lang3.StringUtils;

import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.user.api.XWikiUser;
import com.xpn.xwiki.user.impl.xwiki.*;

import java.security.Principal;
import org.securityfilter.realm.SimplePrincipal;
import org.securityfilter.filter.URLPatternMatcher;
import org.xwiki.container.servlet.filters.SavedRequestManager;


public class GoogleAppsAuthenticationImpl extends XWikiAuthServiceImpl {
    
 /**
  * Logging tool.
  */
 private static final Log LOG = LogFactory.getLog(GroovyAuthServiceImpl.class);

 public XWikiUser checkAuth(XWikiContext context) throws XWikiException {
  LOG.info("In groovy page checkAuth" );
  if(isLogoutRequest(context)) {
    def cookieTools = context.getWiki().parseGroovyFromPage("xwiki:GoogleApps.CookieAuthenticationPersistenceStoreTools", context)
    cookieTools.initialize(context)
    cookieTools.clear()
  }
  return super.checkAuth(context);
 }

 /**
  * We cannot authenticate locally since we need to trust the app server for
  * authentication
  *
  * @param username
  * @param password
  * @param context
  * @return
  * @throws XWikiException
  */
 public XWikiUser checkAuth(String username, String password, String rememberme, XWikiContext context) {
   return super.checkAuth(username, password, rememberme, context);
 }

 public void showLogin(XWikiContext context) throws XWikiException {
  def redirected = false;
  try {
   def url = context.getWiki().getURL("GoogleApps.Login", "view", context)
   def configdoc = context.getWiki().getDocument("xwiki:GoogleApps.GoogleAppsConfig", context);
   def configObj = configdoc.getObject("xwiki:GoogleApps.GoogleAppsConfigClass");
   def usecookies = configObj.getStringValue("useCookies");
   def skipLoginPage = configObj.getStringValue("skipLoginPage");
   if (usecookies &amp;&amp; skipLoginPage) {
    def request = context.getRequest();
    def cookieTools = context.getWiki().parseGroovyFromPage("xwiki:GoogleApps.CookieAuthenticationPersistenceStoreTools", context)
    cookieTools.initialize(context)
    def userCookie = cookieTools.retrieve()
    if (userCookie) {
      def savedRequestId = request.getParameter(SavedRequestManager.getSavedRequestIdentifier());
      if (StringUtils.isEmpty(savedRequestId)) {
            // Save this request
            savedRequestId = SavedRequestManager.saveRequest(request);
      }
      def sridParameter = SavedRequestManager.getSavedRequestIdentifier() + "=" + savedRequestId;

      def redirectBack = new StringBuilder(request.getRequestURI());
      redirectBack.append('?');
      def delimiter = "";
      if (StringUtils.isNotEmpty(request.getQueryString())) {
            redirectBack.append(request.getQueryString());
            delimiter = "&amp;";
      }
      if (!request.getParameterMap().containsKey(SavedRequestManager.getSavedRequestIdentifier())) {
            redirectBack.append(delimiter);
            redirectBack.append(sridParameter);
      }

      def finalURL = url + "?" + sridParameter + "&amp;xredirect=" + URLEncoder.encode(redirectBack.toString(), "UTF-8");
      System.out.println("Redirecting to "  + finalURL);
      redirected = true;
      context.getResponse().sendRedirect(finalURL);
    }
   }
  } catch (e) {
      e.printStackTrace();
  } finally { 
     if (!redirected)
      super.showLogin(context);
  }
 }

 public Principal authenticate(String username, String password, XWikiContext context) throws XWikiException {
       LOG.info("In groovy page authenticate" );
       def session = context.getRequest().getSession();
       def xwikiUser = session.getAttribute("googleappslogin");
       // get configuration for authentification with cookies
       def configdoc = context.getWiki().getDocument("xwiki:GoogleApps.GoogleAppsConfig", context);
       def configObj = configdoc.getObject("xwiki:GoogleApps.GoogleAppsConfigClass");
       def usecookies = configObj.getStringValue("useCookies");
       def authWithCookies = configObj.getStringValue("authWithCookies");
       // authenticate user from cookie value
       if (xwikiUser == null &amp;&amp; usecookies &amp;&amp; authWithCookies) {
         def cookieTools = context.getWiki().parseGroovyFromPage("xwiki:GoogleApps.CookieAuthenticationPersistenceStoreTools", context)
         cookieTools.initialize(context)
         def userCookie = cookieTools.retrieve()
         xwikiUser = (userCookie == null) ? null : "xwiki:" + userCookie;
         LOG.info("Authenticate with cookie")
       }
       if (xwikiUser!=null) {
          LOG.info("Authenticating user " + xwikiUser);
          return new SimplePrincipal(xwikiUser);
       } else {
        return super.authenticate(username, password, context);
       }
 }

   /**
   * @return true if the current request match the configured logout page pattern.
   */
  private boolean isLogoutRequest(XWikiContext context) {
    def logoutMatcher = context.getWiki().parseGroovyFromPage("xwiki:GoogleApps.RequestMatcherTools", context)
    logoutMatcher.initRequestMatcher(context.getWiki().Param("xwiki.authentication.logoutpage"))
    return logoutMatcher.match(context.getRequest());
  }
}</content>
</xwikidoc>
